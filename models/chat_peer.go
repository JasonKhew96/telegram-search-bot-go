// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ChatPeer is an object representing the database table.
type ChatPeer struct {
	ID     int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	ChatID int64 `boil:"chat_id" json:"chat_id" toml:"chat_id" yaml:"chat_id"`
	PeerID int64 `boil:"peer_id" json:"peer_id" toml:"peer_id" yaml:"peer_id"`

	R *chatPeerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L chatPeerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChatPeerColumns = struct {
	ID     string
	ChatID string
	PeerID string
}{
	ID:     "id",
	ChatID: "chat_id",
	PeerID: "peer_id",
}

var ChatPeerTableColumns = struct {
	ID     string
	ChatID string
	PeerID string
}{
	ID:     "chat_peer.id",
	ChatID: "chat_peer.chat_id",
	PeerID: "chat_peer.peer_id",
}

// Generated where

var ChatPeerWhere = struct {
	ID     whereHelperint64
	ChatID whereHelperint64
	PeerID whereHelperint64
}{
	ID:     whereHelperint64{field: "\"chat_peer\".\"id\""},
	ChatID: whereHelperint64{field: "\"chat_peer\".\"chat_id\""},
	PeerID: whereHelperint64{field: "\"chat_peer\".\"peer_id\""},
}

// ChatPeerRels is where relationship names are stored.
var ChatPeerRels = struct {
}{}

// chatPeerR is where relationships are stored.
type chatPeerR struct {
}

// NewStruct creates a new relationship struct
func (*chatPeerR) NewStruct() *chatPeerR {
	return &chatPeerR{}
}

// chatPeerL is where Load methods for each relationship are stored.
type chatPeerL struct{}

var (
	chatPeerAllColumns            = []string{"id", "chat_id", "peer_id"}
	chatPeerColumnsWithoutDefault = []string{"chat_id", "peer_id"}
	chatPeerColumnsWithDefault    = []string{"id"}
	chatPeerPrimaryKeyColumns     = []string{"id"}
	chatPeerGeneratedColumns      = []string{"id"}
)

type (
	// ChatPeerSlice is an alias for a slice of pointers to ChatPeer.
	// This should almost always be used instead of []ChatPeer.
	ChatPeerSlice []*ChatPeer
	// ChatPeerHook is the signature for custom ChatPeer hook methods
	ChatPeerHook func(context.Context, boil.ContextExecutor, *ChatPeer) error

	chatPeerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chatPeerType                 = reflect.TypeOf(&ChatPeer{})
	chatPeerMapping              = queries.MakeStructMapping(chatPeerType)
	chatPeerPrimaryKeyMapping, _ = queries.BindMapping(chatPeerType, chatPeerMapping, chatPeerPrimaryKeyColumns)
	chatPeerInsertCacheMut       sync.RWMutex
	chatPeerInsertCache          = make(map[string]insertCache)
	chatPeerUpdateCacheMut       sync.RWMutex
	chatPeerUpdateCache          = make(map[string]updateCache)
	chatPeerUpsertCacheMut       sync.RWMutex
	chatPeerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var chatPeerAfterSelectMu sync.Mutex
var chatPeerAfterSelectHooks []ChatPeerHook

var chatPeerBeforeInsertMu sync.Mutex
var chatPeerBeforeInsertHooks []ChatPeerHook
var chatPeerAfterInsertMu sync.Mutex
var chatPeerAfterInsertHooks []ChatPeerHook

var chatPeerBeforeUpdateMu sync.Mutex
var chatPeerBeforeUpdateHooks []ChatPeerHook
var chatPeerAfterUpdateMu sync.Mutex
var chatPeerAfterUpdateHooks []ChatPeerHook

var chatPeerBeforeDeleteMu sync.Mutex
var chatPeerBeforeDeleteHooks []ChatPeerHook
var chatPeerAfterDeleteMu sync.Mutex
var chatPeerAfterDeleteHooks []ChatPeerHook

var chatPeerBeforeUpsertMu sync.Mutex
var chatPeerBeforeUpsertHooks []ChatPeerHook
var chatPeerAfterUpsertMu sync.Mutex
var chatPeerAfterUpsertHooks []ChatPeerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ChatPeer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatPeerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ChatPeer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatPeerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ChatPeer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatPeerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ChatPeer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatPeerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ChatPeer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatPeerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ChatPeer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatPeerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ChatPeer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatPeerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ChatPeer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatPeerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ChatPeer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatPeerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChatPeerHook registers your hook function for all future operations.
func AddChatPeerHook(hookPoint boil.HookPoint, chatPeerHook ChatPeerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		chatPeerAfterSelectMu.Lock()
		chatPeerAfterSelectHooks = append(chatPeerAfterSelectHooks, chatPeerHook)
		chatPeerAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		chatPeerBeforeInsertMu.Lock()
		chatPeerBeforeInsertHooks = append(chatPeerBeforeInsertHooks, chatPeerHook)
		chatPeerBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		chatPeerAfterInsertMu.Lock()
		chatPeerAfterInsertHooks = append(chatPeerAfterInsertHooks, chatPeerHook)
		chatPeerAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		chatPeerBeforeUpdateMu.Lock()
		chatPeerBeforeUpdateHooks = append(chatPeerBeforeUpdateHooks, chatPeerHook)
		chatPeerBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		chatPeerAfterUpdateMu.Lock()
		chatPeerAfterUpdateHooks = append(chatPeerAfterUpdateHooks, chatPeerHook)
		chatPeerAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		chatPeerBeforeDeleteMu.Lock()
		chatPeerBeforeDeleteHooks = append(chatPeerBeforeDeleteHooks, chatPeerHook)
		chatPeerBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		chatPeerAfterDeleteMu.Lock()
		chatPeerAfterDeleteHooks = append(chatPeerAfterDeleteHooks, chatPeerHook)
		chatPeerAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		chatPeerBeforeUpsertMu.Lock()
		chatPeerBeforeUpsertHooks = append(chatPeerBeforeUpsertHooks, chatPeerHook)
		chatPeerBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		chatPeerAfterUpsertMu.Lock()
		chatPeerAfterUpsertHooks = append(chatPeerAfterUpsertHooks, chatPeerHook)
		chatPeerAfterUpsertMu.Unlock()
	}
}

// One returns a single chatPeer record from the query.
func (q chatPeerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ChatPeer, error) {
	o := &ChatPeer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for chat_peer")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ChatPeer records from the query.
func (q chatPeerQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChatPeerSlice, error) {
	var o []*ChatPeer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ChatPeer slice")
	}

	if len(chatPeerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ChatPeer records in the query.
func (q chatPeerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count chat_peer rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q chatPeerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if chat_peer exists")
	}

	return count > 0, nil
}

// ChatPeers retrieves all the records using an executor.
func ChatPeers(mods ...qm.QueryMod) chatPeerQuery {
	mods = append(mods, qm.From("\"chat_peer\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"chat_peer\".*"})
	}

	return chatPeerQuery{q}
}

// FindChatPeer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChatPeer(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ChatPeer, error) {
	chatPeerObj := &ChatPeer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"chat_peer\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, chatPeerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from chat_peer")
	}

	if err = chatPeerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return chatPeerObj, err
	}

	return chatPeerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChatPeer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no chat_peer provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chatPeerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chatPeerInsertCacheMut.RLock()
	cache, cached := chatPeerInsertCache[key]
	chatPeerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chatPeerAllColumns,
			chatPeerColumnsWithDefault,
			chatPeerColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, chatPeerGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(chatPeerType, chatPeerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chatPeerType, chatPeerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"chat_peer\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"chat_peer\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into chat_peer")
	}

	if !cached {
		chatPeerInsertCacheMut.Lock()
		chatPeerInsertCache[key] = cache
		chatPeerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ChatPeer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChatPeer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	chatPeerUpdateCacheMut.RLock()
	cache, cached := chatPeerUpdateCache[key]
	chatPeerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chatPeerAllColumns,
			chatPeerPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, chatPeerGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update chat_peer, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"chat_peer\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, chatPeerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chatPeerType, chatPeerMapping, append(wl, chatPeerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update chat_peer row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for chat_peer")
	}

	if !cached {
		chatPeerUpdateCacheMut.Lock()
		chatPeerUpdateCache[key] = cache
		chatPeerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q chatPeerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for chat_peer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for chat_peer")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChatPeerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatPeerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"chat_peer\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chatPeerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in chatPeer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all chatPeer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ChatPeer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no chat_peer provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chatPeerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chatPeerUpsertCacheMut.RLock()
	cache, cached := chatPeerUpsertCache[key]
	chatPeerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			chatPeerAllColumns,
			chatPeerColumnsWithDefault,
			chatPeerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			chatPeerAllColumns,
			chatPeerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert chat_peer, could not build update column list")
		}

		ret := strmangle.SetComplement(chatPeerAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(chatPeerPrimaryKeyColumns))
			copy(conflict, chatPeerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"chat_peer\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(chatPeerType, chatPeerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chatPeerType, chatPeerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert chat_peer")
	}

	if !cached {
		chatPeerUpsertCacheMut.Lock()
		chatPeerUpsertCache[key] = cache
		chatPeerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ChatPeer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChatPeer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ChatPeer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chatPeerPrimaryKeyMapping)
	sql := "DELETE FROM \"chat_peer\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from chat_peer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for chat_peer")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q chatPeerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no chatPeerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from chat_peer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for chat_peer")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChatPeerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(chatPeerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatPeerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"chat_peer\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chatPeerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from chatPeer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for chat_peer")
	}

	if len(chatPeerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChatPeer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChatPeer(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChatPeerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChatPeerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatPeerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"chat_peer\".* FROM \"chat_peer\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chatPeerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ChatPeerSlice")
	}

	*o = slice

	return nil
}

// ChatPeerExists checks if the ChatPeer row exists.
func ChatPeerExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"chat_peer\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if chat_peer exists")
	}

	return exists, nil
}

// Exists checks if the ChatPeer row exists.
func (o *ChatPeer) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ChatPeerExists(ctx, exec, o.ID)
}
