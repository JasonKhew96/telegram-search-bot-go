// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Chats", testChats)
	t.Run("ChatPeers", testChatPeers)
	t.Run("Messages", testMessages)
	t.Run("Peers", testPeers)
}

func TestSoftDelete(t *testing.T) {
	t.Run("Messages", testMessagesSoftDelete)
}

func TestQuerySoftDeleteAll(t *testing.T) {
	t.Run("Messages", testMessagesQuerySoftDeleteAll)
}

func TestSliceSoftDeleteAll(t *testing.T) {
	t.Run("Messages", testMessagesSliceSoftDeleteAll)
}

func TestDelete(t *testing.T) {
	t.Run("Chats", testChatsDelete)
	t.Run("ChatPeers", testChatPeersDelete)
	t.Run("Messages", testMessagesDelete)
	t.Run("Peers", testPeersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Chats", testChatsQueryDeleteAll)
	t.Run("ChatPeers", testChatPeersQueryDeleteAll)
	t.Run("Messages", testMessagesQueryDeleteAll)
	t.Run("Peers", testPeersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Chats", testChatsSliceDeleteAll)
	t.Run("ChatPeers", testChatPeersSliceDeleteAll)
	t.Run("Messages", testMessagesSliceDeleteAll)
	t.Run("Peers", testPeersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Chats", testChatsExists)
	t.Run("ChatPeers", testChatPeersExists)
	t.Run("Messages", testMessagesExists)
	t.Run("Peers", testPeersExists)
}

func TestFind(t *testing.T) {
	t.Run("Chats", testChatsFind)
	t.Run("ChatPeers", testChatPeersFind)
	t.Run("Messages", testMessagesFind)
	t.Run("Peers", testPeersFind)
}

func TestBind(t *testing.T) {
	t.Run("Chats", testChatsBind)
	t.Run("ChatPeers", testChatPeersBind)
	t.Run("Messages", testMessagesBind)
	t.Run("Peers", testPeersBind)
}

func TestOne(t *testing.T) {
	t.Run("Chats", testChatsOne)
	t.Run("ChatPeers", testChatPeersOne)
	t.Run("Messages", testMessagesOne)
	t.Run("Peers", testPeersOne)
}

func TestAll(t *testing.T) {
	t.Run("Chats", testChatsAll)
	t.Run("ChatPeers", testChatPeersAll)
	t.Run("Messages", testMessagesAll)
	t.Run("Peers", testPeersAll)
}

func TestCount(t *testing.T) {
	t.Run("Chats", testChatsCount)
	t.Run("ChatPeers", testChatPeersCount)
	t.Run("Messages", testMessagesCount)
	t.Run("Peers", testPeersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Chats", testChatsHooks)
	t.Run("ChatPeers", testChatPeersHooks)
	t.Run("Messages", testMessagesHooks)
	t.Run("Peers", testPeersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Chats", testChatsInsert)
	t.Run("Chats", testChatsInsertWhitelist)
	t.Run("ChatPeers", testChatPeersInsert)
	t.Run("ChatPeers", testChatPeersInsertWhitelist)
	t.Run("Messages", testMessagesInsert)
	t.Run("Messages", testMessagesInsertWhitelist)
	t.Run("Peers", testPeersInsert)
	t.Run("Peers", testPeersInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("Chats", testChatsReload)
	t.Run("ChatPeers", testChatPeersReload)
	t.Run("Messages", testMessagesReload)
	t.Run("Peers", testPeersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Chats", testChatsReloadAll)
	t.Run("ChatPeers", testChatPeersReloadAll)
	t.Run("Messages", testMessagesReloadAll)
	t.Run("Peers", testPeersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Chats", testChatsSelect)
	t.Run("ChatPeers", testChatPeersSelect)
	t.Run("Messages", testMessagesSelect)
	t.Run("Peers", testPeersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Chats", testChatsUpdate)
	t.Run("ChatPeers", testChatPeersUpdate)
	t.Run("Messages", testMessagesUpdate)
	t.Run("Peers", testPeersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Chats", testChatsSliceUpdateAll)
	t.Run("ChatPeers", testChatPeersSliceUpdateAll)
	t.Run("Messages", testMessagesSliceUpdateAll)
	t.Run("Peers", testPeersSliceUpdateAll)
}
